% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findLabels.R
\name{findLabels}
\alias{findLabels}
\title{Mixed Membership Post-Processing
   
\code{findLabels} finds the optimal permutation of labels that minimizes 
the weighted squared difference between the arrays of subpopulation parameters from a fitted mixed membership
model, \eqn{\theta} and a given comparison model.}
\usage{
findLabels(model, comparison, exhaustive = FALSE)
}
\arguments{
\item{model}{the fitted \code{mixedMemModelMCMC} or \code{mixedMemModelVI} object.}

\item{comparison}{an array of the same dimensions as model$theta which contains the subpopulation parameters from another model.
\code{findLabels} will return a permutation of the labels of \code{model} which match to \code{comparison} most closely.}

\item{exhaustive}{a boolean for whether an exhaustive search should be performed. If false, a greedy algorithim is used instead.}
}
\value{
\code{findLabels} returns a list with two objects: \code{perm} and \code{loss}. \code{perm} is the optimal permutation of the labels with respect to the squared error loss.
\code{loss} is the calculated value of the weighted squared error loss (shown above) for the optimal permutation.
}
\description{
Mixed Membership models are invariant to permutations of the sub-population labels; swapping the names of each sub-population yields an equivalent model. 
The ordering of the labels in a fitted model is often dependent on the initialization points.
The function \code{findLabels} selects a permutation of the sub-population labels that best matches a given comparison model 
by minimizing squared differences between the \eqn{\theta} arrays.
}
\details{
\eqn{Loss = \sum_j \sum_k [\sum_v (\hat\theta_{k,v} - \theta_{k,v})^2]}

If K, number of sub-populations, is small, the method searches through all K! permutations of the sub-population labels and 
select the permutation which minimizes the loss. If K is large, a greedy algorithim can be used instead. This
algorithm selects the best match for each fitted sub-population starting with the group with the largest fitted 
relative frequency.
}
\examples{

\dontrun{
# See mixedMemModelMCMC or mixedMemModelVI documentation for how to generate data and instantiate objects
# After the data as been generated, we initialize the array of sub-population parameters (theta) 
# according to a permutation of the true labeling
set.seed(123)
perm <- sample.int(K, size = K, replace = FALSE)
theta.perm <- theta_truth[,perm,]
test_model <- mixedMemModelVI(Total = Total, J = J,Rj = Rj, Nijr= Nijr,
 K = K, Vj = Vj,dist = dist, obs = obs, alpha = alpha, theta = theta.perm)
out <- mmVIFit(test_model)
opt.perm <- findLabels(out, theta_truth)
opt.perm

# produce mixedMemModel object with sub-population labels permuted to best match
# the comparison model
out <- permuteLabels(out, opt.perm$perm)
}
}
\seealso{
permuteLabels
}

