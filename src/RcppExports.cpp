// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// varInfInputC
double varInfInputC(Rcpp::List model_r, int print, int printMod, int stepType, int maxTotalIter, int maxEIter, int maxAlphaIter, int maxBetaIter, int maxLSIter, double elboTol, double alphaTol, double betaTol, double aNaught, double tau, SEXP holdConstSEXP);
RcppExport SEXP mixedMem_varInfInputC(SEXP model_rSEXP, SEXP printSEXP, SEXP printModSEXP, SEXP stepTypeSEXP, SEXP maxTotalIterSEXP, SEXP maxEIterSEXP, SEXP maxAlphaIterSEXP, SEXP maxBetaIterSEXP, SEXP maxLSIterSEXP, SEXP elboTolSEXP, SEXP alphaTolSEXP, SEXP betaTolSEXP, SEXP aNaughtSEXP, SEXP tauSEXP, SEXP holdConstSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type model_r(model_rSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    Rcpp::traits::input_parameter< int >::type printMod(printModSEXP);
    Rcpp::traits::input_parameter< int >::type stepType(stepTypeSEXP);
    Rcpp::traits::input_parameter< int >::type maxTotalIter(maxTotalIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxEIter(maxEIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxAlphaIter(maxAlphaIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxBetaIter(maxBetaIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxLSIter(maxLSIterSEXP);
    Rcpp::traits::input_parameter< double >::type elboTol(elboTolSEXP);
    Rcpp::traits::input_parameter< double >::type alphaTol(alphaTolSEXP);
    Rcpp::traits::input_parameter< double >::type betaTol(betaTolSEXP);
    Rcpp::traits::input_parameter< double >::type aNaught(aNaughtSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< SEXP >::type holdConstSEXP(holdConstSEXPSEXP);
    __result = Rcpp::wrap(varInfInputC(model_r, print, printMod, stepType, maxTotalIter, maxEIter, maxAlphaIter, maxBetaIter, maxLSIter, elboTol, alphaTol, betaTol, aNaught, tau, holdConstSEXP));
    return __result;
END_RCPP
}
// computeElboC
double computeElboC(Rcpp::List model_r);
RcppExport SEXP mixedMem_computeElboC(SEXP model_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type model_r(model_rSEXP);
    __result = Rcpp::wrap(computeElboC(model_r));
    return __result;
END_RCPP
}
