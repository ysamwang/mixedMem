// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// varInfInputC
Rcpp::List varInfInputC(Rcpp::List model_r, int print, int printMod, int stepType, int maxTotalIter, int maxEIter, int maxAlphaIter, int maxThetaIter, int maxLSIter, double elboTol, double alphaTol, double thetaTol, double aNaught, double tau, int bMax, double bNaught, double bMult, int vCutoff, SEXP holdConstSEXP);
RcppExport SEXP mixedMem_varInfInputC(SEXP model_rSEXP, SEXP printSEXP, SEXP printModSEXP, SEXP stepTypeSEXP, SEXP maxTotalIterSEXP, SEXP maxEIterSEXP, SEXP maxAlphaIterSEXP, SEXP maxThetaIterSEXP, SEXP maxLSIterSEXP, SEXP elboTolSEXP, SEXP alphaTolSEXP, SEXP thetaTolSEXP, SEXP aNaughtSEXP, SEXP tauSEXP, SEXP bMaxSEXP, SEXP bNaughtSEXP, SEXP bMultSEXP, SEXP vCutoffSEXP, SEXP holdConstSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type model_r(model_rSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    Rcpp::traits::input_parameter< int >::type printMod(printModSEXP);
    Rcpp::traits::input_parameter< int >::type stepType(stepTypeSEXP);
    Rcpp::traits::input_parameter< int >::type maxTotalIter(maxTotalIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxEIter(maxEIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxAlphaIter(maxAlphaIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxThetaIter(maxThetaIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxLSIter(maxLSIterSEXP);
    Rcpp::traits::input_parameter< double >::type elboTol(elboTolSEXP);
    Rcpp::traits::input_parameter< double >::type alphaTol(alphaTolSEXP);
    Rcpp::traits::input_parameter< double >::type thetaTol(thetaTolSEXP);
    Rcpp::traits::input_parameter< double >::type aNaught(aNaughtSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type bMax(bMaxSEXP);
    Rcpp::traits::input_parameter< double >::type bNaught(bNaughtSEXP);
    Rcpp::traits::input_parameter< double >::type bMult(bMultSEXP);
    Rcpp::traits::input_parameter< int >::type vCutoff(vCutoffSEXP);
    Rcpp::traits::input_parameter< SEXP >::type holdConstSEXP(holdConstSEXPSEXP);
    __result = Rcpp::wrap(varInfInputC(model_r, print, printMod, stepType, maxTotalIter, maxEIter, maxAlphaIter, maxThetaIter, maxLSIter, elboTol, alphaTol, thetaTol, aNaught, tau, bMax, bNaught, bMult, vCutoff, holdConstSEXP));
    return __result;
END_RCPP
}
// computeElboC
double computeElboC(Rcpp::List model_r);
RcppExport SEXP mixedMem_computeElboC(SEXP model_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type model_r(model_rSEXP);
    __result = Rcpp::wrap(computeElboC(model_r));
    return __result;
END_RCPP
}
// varInfInputExtC
Rcpp::List varInfInputExtC(Rcpp::List model_r, int print, int printMod, int stepType, int maxTotalIter, int maxEIter, int maxAlphaIter, int maxThetaIter, int maxLSIter, double elboTol, double alphaTol, double thetaTol, double aNaught, double tau, int bMax, double bNaught, double bMult, int vCutoff, SEXP holdConstSEXP);
RcppExport SEXP mixedMem_varInfInputExtC(SEXP model_rSEXP, SEXP printSEXP, SEXP printModSEXP, SEXP stepTypeSEXP, SEXP maxTotalIterSEXP, SEXP maxEIterSEXP, SEXP maxAlphaIterSEXP, SEXP maxThetaIterSEXP, SEXP maxLSIterSEXP, SEXP elboTolSEXP, SEXP alphaTolSEXP, SEXP thetaTolSEXP, SEXP aNaughtSEXP, SEXP tauSEXP, SEXP bMaxSEXP, SEXP bNaughtSEXP, SEXP bMultSEXP, SEXP vCutoffSEXP, SEXP holdConstSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type model_r(model_rSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    Rcpp::traits::input_parameter< int >::type printMod(printModSEXP);
    Rcpp::traits::input_parameter< int >::type stepType(stepTypeSEXP);
    Rcpp::traits::input_parameter< int >::type maxTotalIter(maxTotalIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxEIter(maxEIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxAlphaIter(maxAlphaIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxThetaIter(maxThetaIterSEXP);
    Rcpp::traits::input_parameter< int >::type maxLSIter(maxLSIterSEXP);
    Rcpp::traits::input_parameter< double >::type elboTol(elboTolSEXP);
    Rcpp::traits::input_parameter< double >::type alphaTol(alphaTolSEXP);
    Rcpp::traits::input_parameter< double >::type thetaTol(thetaTolSEXP);
    Rcpp::traits::input_parameter< double >::type aNaught(aNaughtSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type bMax(bMaxSEXP);
    Rcpp::traits::input_parameter< double >::type bNaught(bNaughtSEXP);
    Rcpp::traits::input_parameter< double >::type bMult(bMultSEXP);
    Rcpp::traits::input_parameter< int >::type vCutoff(vCutoffSEXP);
    Rcpp::traits::input_parameter< SEXP >::type holdConstSEXP(holdConstSEXPSEXP);
    __result = Rcpp::wrap(varInfInputExtC(model_r, print, printMod, stepType, maxTotalIter, maxEIter, maxAlphaIter, maxThetaIter, maxLSIter, elboTol, alphaTol, thetaTol, aNaught, tau, bMax, bNaught, bMult, vCutoff, holdConstSEXP));
    return __result;
END_RCPP
}
// computeElboExtC
double computeElboExtC(Rcpp::List model_r);
RcppExport SEXP mixedMem_computeElboExtC(SEXP model_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type model_r(model_rSEXP);
    __result = Rcpp::wrap(computeElboExtC(model_r));
    return __result;
END_RCPP
}
// rDirichlet_sw
SEXP rDirichlet_sw(SEXP alpha_r);
RcppExport SEXP mixedMem_rDirichlet_sw(SEXP alpha_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_r(alpha_rSEXP);
    __result = Rcpp::wrap(rDirichlet_sw(alpha_r));
    return __result;
END_RCPP
}
// rsampler_sw
int rsampler_sw(SEXP prob_r, SEXP sample_r);
RcppExport SEXP mixedMem_rsampler_sw(SEXP prob_rSEXP, SEXP sample_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type prob_r(prob_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sample_r(sample_rSEXP);
    __result = Rcpp::wrap(rsampler_sw(prob_r, sample_r));
    return __result;
END_RCPP
}
